name: TAP PR

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
env:
  WORKLOAD_NAMESPACE: dev

jobs:
  build:
    if: github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Get repository name
      run: echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d / -f 2)" >> $GITHUB_ENV
    - name: install-kubectl
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}
    - name: Install ytt
      uses: carvel-dev/setup-action@v2.0.0
      with:
        only: ytt
        ytt: v0.47.0
    - name: build and deploy workload template
      run: |
        echo -n ${{ vars.WORKLOAD_YAML }} | base64 -d | ytt -f - \
        --data-value-yaml name=${{ env.REPO_NAME}} \
        --data-value-yaml namespace=${{ env.WORKLOAD_NAMESPACE }} \
        --data-value-yaml pr=${{ github.event.pull_request.number }} \
        --data-value-yaml shortSha=$(git rev-parse --short ${{ github.event.pull_request.head.sha }}) \
        --data-value-yaml sha=${{ github.event.pull_request.head.sha }} \
        --data-value-yaml branch=${{ github.head_ref }} \
        --data-value-yaml repo=${{ github.repository }} | kubectl apply -f-
    - name: Get workload name
      run: echo "FORMATTED_WORKLOAD_NAME=${{ env.REPO_NAME }}-pr-${{ github.event.pull_request.number }}-$(git rev-parse --short ${{ github.event.pull_request.head.sha }})" >> $GITHUB_ENV
    - name: check status
      timeout-minutes: 10
      run: |
        # Initialize a variable to store the overall status of the conditions
        OVERALL_STATUS="Unknown"
        # Loop until the overall status is either True or False
        while [[ $OVERALL_STATUS == "Unknown" ]]; do
          # Get the status.conditions of the resource as a JSON array
          CONDITIONS=$(kubectl -n ${{ env.WORKLOAD_NAMESPACE }} get workload ${{ env.FORMATTED_WORKLOAD_NAME }} -o jsonpath='{.status.conditions}')
          # Filter the conditions by the name field
          FILTERED=$(echo $CONDITIONS | jq -c '.[] | select(.name == "source-tester")')
          # Loop through the filtered array and check each condition
          for CONDITION in $(echo $FILTERED | jq -c '.[]'); do
            # Extract the type, status, and message fields
            TYPE=$(echo $CONDITION | jq -r '.type')
            STATUS=$(echo $CONDITION | jq -r '.status')
            MESSAGE=$(echo $CONDITION | jq -r '.message')
            # If the type is ResourcesHealthy and the status is False, fail the action and print the message
            if [[ $TYPE == "ResourcesHealthy" && $STATUS == "False" ]]; then
              echo $MESSAGE
              exit 1
            fi
            # If the status is True, set the overall status to True
            if [[ $STATUS == "True" ]]; then
              OVERALL_STATUS="True"
            fi
          done
          sleep 10
        done
  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install-kubectl
        uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      - name: Get repository name
        run: echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d / -f 2)" >> $GITHUB_ENV
      - name: cleanup workload
        run: |
          dws(){
              for workload in $(kubectl -n ${{ env.WORKLOAD_NAMESPACE }} get workloads | grep -v NAME | cut -f1 -d ' ' | grep $1); do kubectl -n ${{ env.WORKLOAD_NAMESPACE }} delete workload/$workload --force; done
          }
          dws "${{ env.REPO_NAME }}-pr-${{ github.event.pull_request.number }}"
